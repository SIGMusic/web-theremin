{"version":3,"sources":["../node_modules/peerjs/dist sync","pages/components/Room.tsx","misc/utils/Message.ts","pages/components/LandingPage.tsx","networking/utils/connect.ts","pages/components/Routing.tsx","pages/components/App.tsx","scripts/serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Stage","Message","Toaster","create","position","Position","BOTTOM","usePortal","canEscapeKeyClear","process","REACT_APP_THEREMIN_HOST","REACT_APP_THEREMIN_PORT","Action","calcColor","sound","frequency","volume","x","Math","log2","y","map","p","floor","a","lo","hi","max","min","xx","Room","props","channel","osc","screenRef","myLocation","peerLocation","onOpen","console","log","onError","error","onClose","onData","data","updateSound","onMouseDown","start","setState","stage","Playing","onMouseUp","stop","Muted","locsToSound","locs","mean","zs","reduce","b","length","xs","ys","normalize","location","current","getBoundingClientRect","height","width","onMouseMove","event","normalized","sendData","value","state","color","componentDidMount","show","timeout","message","icon","intent","Intent","SUCCESS","window","addEventListener","componentWillUnmount","removeEventListener","render","className","ref","style","borderColor","borderWidth","borderStyle","Loading","openRoom","Tone","type","toDestination","React","createRef","Component","Channel","params","connection","peer","onIdGiven","peerId","myId","open","send","setHandlers","on","connectToRoom","onConnection","connect","reliable","setConnectionHandlers","d","close","this","Peer","undefined","secure","host","port","key","debug","LandingPage","action","ReadyToJoinRoom","joinRoom","JoiningRoom","launchNewRoom","PRIMARY","joinExistingRoom","setNewRoom","yes","creatingNewRoom","onCodeChange","newPeerId","target","selectionStart","selectionEnd","setSelectionRange","newOrExistingRoomMenu","content","text","onClick","BOTTOM_RIGHT","rightIcon","disabled","large","placeholder","rightElement","onChange","WaitingForId","withRouter","Routing","exact","path","dotenv","config","App","Classes","DARK","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fd0bcf8.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 168;","/* eslint-disable */\nimport React from 'react';\nimport {\n  ProgressBar, InputGroup, Button, Intent, FormGroup, Tooltip, H5, Slider,\n  Colors, Spinner,\n} from '@blueprintjs/core';\nimport * as Tone from 'tone';\n\nimport Message, { TIMEOUT } from 'misc/utils/Message';\nimport Channel, { ChannelParams } from 'networking/utils/connect';\nimport 'styles/Room.css';\n\n\nconst {\n  REACT_APP_THEREMIN_HOST = 'localhost',\n  REACT_APP_THEREMIN_PORT = '',\n} = process.env;\n\n// Initial frequency (all the way left).\nconst kInitFreq = 440;\n// Decibels per height.\nconst kHDivisions = 20;\nconst kWaveType = 'sine';\nconst kInitVol = -10;\nconst kBlack = '#000000';\n\n// Represents the location of a mouse cursor.\ntype Location = {\n  x: number;\n  y: number;\n};\n\n// Represents qualities of a sound.\ntype Sound = {\n  frequency: number;\n  volume: number;\n};\n\nenum Stage {\n  Loading,\n  Playing,\n  Muted,\n}\n\ninterface Props {\n  channel: Channel;\n}\n\ninterface State {\n  color: string;\n  stage: Stage;\n}\n\n// Converts a sound into a color of red.\nconst calcColor = (sound: Sound) => {\n  // Recover x, y values.\n  const { frequency, volume } = sound;\n  const x = Math.log2(frequency / kInitFreq);\n  const y = volume / kHDivisions;\n\n  const clamp = (a: number, lo: number, hi: number) => (\n    Math.max(lo, Math.min(hi, a))\n  );\n  // Map x, y to the range {0, 1, ..., 255}.\n  const [xx, yy] = [x, y].map(p => Math.floor(clamp(256 * p, 0, 255)));\n  return `rgba(${xx},0,0,${y})`;\n};\n\nexport default class Room extends React.Component<Props, State> {\n  channel: Channel;\n  osc: Tone.Oscillator;\n  screenRef: React.RefObject<HTMLDivElement>;\n  myLocation: Location;\n  peerLocation: Location;\n\n  constructor(props: Props) {\n    super(props);\n    const { channel } = props;\n\n    this.peerLocation = { x: 0, y: 0 };\n    this.myLocation = { x: 0, y: 0 };\n    this.channel = channel;\n    this.channel.openRoom({\n      onClose: this.onClose,\n      onData: this.onData,\n      onError: this.onError,\n      onOpen: this.onOpen,\n    });\n\n    this.osc = new Tone\n      .Oscillator({ type: kWaveType, frequency: kInitFreq, volume: kInitVol })\n      .toDestination();\n    this.screenRef = React.createRef();\n    this.state = {\n      color: kBlack,\n      stage: Stage.Loading,\n    };\n  }\n\n  private onOpen = () => {\n    console.log('opened connection.');\n    console.log('sending greeting.');\n  };\n\n  private onError = (error: any) => {\n    console.log('Got an error', error);\n  };\n\n  private onClose = () => {\n    console.log('closed connection lol.');\n  };\n\n  private onData = (data: any) => {\n    // console.log(`data received: ${data}`);\n    const peerLocation = data as Location;\n    this.peerLocation = peerLocation;\n    this.updateSound();\n  };\n\n  private onMouseDown = () => {\n    this.osc.start();\n    this.setState({\n      stage: Stage.Playing,\n    });\n  };\n\n  private onMouseUp = () => {\n    this.osc.stop();\n    this.setState({\n      stage: Stage.Muted,\n    });\n  };\n\n  /**\n   * Takes the average _normalized_ location and converts to a sound.\n   */\n  private locsToSound = (locs: Location[]): Sound | null => {\n    // console.log(height, width);\n    /* Mean of a list. */\n    const mean = (zs: number[]) => zs.reduce((a, b) => a + b) / zs.length;\n    const xs = locs.map(({ x }) => x);\n    const ys = locs.map(({ y }) => y);\n    const x = mean(xs);\n    const y = mean(ys);\n\n    if (!(0 <= x && x <= 1 && 0 <= y && y <= 1)) return null;\n\n    const frequency = kInitFreq * (2 ** x);\n    const volume = kHDivisions * y;\n    return { frequency, volume };\n  };\n\n  /**\n   * Converts the (x,y) location on the screen into the range [0,1]x[0,1].\n   */\n  private normalize = (location: Location): Location | null => {\n    const { current } = this.screenRef;\n    // Somehow the rectangle cannot be found.\n    if (current === null) return null;\n\n    const { height, width } = current.getBoundingClientRect();\n    const { x, y } = location;\n    return { x: x / width, y: y / height };\n  };\n\n  private onMouseMove = (event: MouseEvent) => {\n    const normalized = this.normalize({ x: event.x, y: event.y });\n    if (normalized === null) return;\n\n    this.myLocation = normalized;\n    this.updateSound();\n  }\n\n  private updateSound = () => {\n    // console.log('location', location, 'peerLocation', this.peerLocation);\n    const sound = this.locsToSound([\n      this.myLocation, this.peerLocation,\n    ]);\n    // console.log('sound', sound);\n    // Cursor is off of the screen.\n    if (sound === null) return;\n\n    // Send this data to the peer!\n    const sent = this.channel.sendData(this.myLocation);\n    // console.log(`sent successfully? ${sent}`);\n\n    const { frequency, volume } = sound;\n    // console.log(`(${x}, ${y}) => ${frequency} Hz, ${volume} db`);\n\n    this.osc.frequency.value = frequency;\n    this.osc.volume.value = volume;\n\n    const { stage } = this.state;\n    if (stage !== Stage.Playing) return;\n\n    const color = calcColor(sound);\n    this.setState({ stage, color });\n  };\n\n  componentDidMount = () => {\n    Message.show({\n      timeout: TIMEOUT,\n      message: 'Successfully joined room',\n      icon: 'tick',\n      intent: Intent.SUCCESS,\n    });\n\n    window.addEventListener('mousedown', this.onMouseDown);\n    window.addEventListener('mouseup', this.onMouseUp);\n    window.addEventListener('mousemove', this.onMouseMove);\n    this.setState({\n      stage: Stage.Playing,\n    });\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener('mousedown', this.onMouseDown);\n    window.removeEventListener('mouseup', this.onMouseUp);\n    window.removeEventListener('mousemove', this.onMouseMove);\n  };\n\n  render = () => {\n    const { stage, color } = this.state;\n    // console.log(color);\n    return (\n      <div\n        className=\"full\"\n        ref={this.screenRef}\n        style={{\n          borderColor: stage === Stage.Playing ? color : kBlack,\n          borderWidth: '7px',\n          borderStyle: 'solid',\n        }}\n      >\n        <h1>{this.channel.id}</h1>\n        {stage === Stage.Loading && <Spinner />}\n      </div>\n    );\n  };\n}","import { Position, Toaster } from '@blueprintjs/core';\n\nexport const TIMEOUT = 2000;\n\nconst Message = Toaster.create({\n  position: Position.BOTTOM,\n  usePortal: true,\n  canEscapeKeyClear: true,\n});\n\nexport default Message;","/* eslint-disable */\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport {\n  Button, Intent, InputGroup, Popover, Menu, MenuItem, Position,\n} from '@blueprintjs/core';\n\nimport Room from 'pages/components/Room';\nimport Message, { TIMEOUT } from 'misc/utils/Message';\nimport Channel from 'networking/utils/connect';\n\nimport 'styles/LandingPage.css';\n\nenum Action {\n  WaitingForId,\n  ReadyToJoinRoom,\n  JoiningRoom,\n}\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n  /* Toggle for determining whether the user wants to create a new room or join\n   * an existing room.\n   */\n  creatingNewRoom: boolean;\n  /* The room code typed into the text box by the user. */\n  peerId: string;\n  action: Action;\n}\n\n\n/**\n * Represents the LandingPage that the user will initially see when navigating\n * to the theremin application, granted that they did not specify a room code\n * in the url.\n */\nclass LandingPage extends React.Component<Props, State> {\n  private channel: Channel;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.channel = new Channel({ onIdGiven: this.onIdGiven });\n\n    this.state = {\n      creatingNewRoom: false,\n      peerId: '',\n      action: Action.WaitingForId,\n    };\n  }\n\n  componentDidMount = () => { };\n\n  onIdGiven = () => {\n    this.setState({\n      action: Action.ReadyToJoinRoom,\n    });\n  };\n\n\n  /**\n   * Join a room.\n   *\n   * @param peerId - the code of the room to join.\n   *\n   * This function loads a new page.\n   */\n  joinRoom = () => {\n    this.setState({\n      action: Action.JoiningRoom,\n    });\n  };\n\n  /**\n   * Creates a brand new room.\n   * The code for the room is randomly generated within this function.\n   */\n  launchNewRoom = () => {\n    Message.show({\n      timeout: TIMEOUT,\n      message: 'Launching new room ...',\n      icon: 'drawer-left',\n      intent: Intent.PRIMARY,\n    });\n\n    this.joinRoom();\n  };\n\n  /**\n   * Joins a room using the room code specified in the input box.\n   *\n   */\n  joinExistingRoom = () => {\n    Message.show({\n      timeout: TIMEOUT,\n      message: 'Joining existing room ...',\n      icon: 'drawer-left',\n      intent: Intent.PRIMARY,\n    });\n\n    // We need to create a new channel.\n    const { peerId } = this.state;\n    this.channel = new Channel({ peerId });\n\n    this.joinRoom();\n  };\n\n\n  /**\n   * A toggle for determining whether the user wants to create a new room or\n   * join an existing room.\n   *\n   * @param yes - If yes is `true`, then the user desires to create a new room.\n   *\n   * This function updates the state.\n   */\n  setNewRoom = (yes: boolean) => (\n    this.setState({\n      creatingNewRoom: yes,\n    })\n  );\n\n  /**\n   * Update the room code while the user types.\n   */\n  onCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newPeerId = e.target.value;\n    const { target } = e;\n    const { selectionStart, selectionEnd } = target;\n    return this.setState({\n      peerId: newPeerId,\n    }, () => target.setSelectionRange(selectionStart || 0, selectionEnd || 0));\n  };\n\n  render = () => {\n    const { creatingNewRoom, peerId, action } = this.state;\n\n    if (action === Action.JoiningRoom) {\n      return <Room channel={this.channel} />;\n    }\n\n    const newOrExistingRoomMenu = (\n      <Popover\n        content={(\n          <Menu>\n            <MenuItem\n              text=\"Create New Room\"\n              onClick={() => this.setNewRoom(true)}\n            />\n            <MenuItem\n              text=\"Join Existing Room\"\n              onClick={() => this.setNewRoom(false)}\n            />\n          </Menu>\n        )}\n        position={Position.BOTTOM_RIGHT}\n      >\n        <Button\n          rightIcon=\"caret-down\"\n          text={creatingNewRoom ? 'Create New Room' : 'Join Existing Room'}\n        />\n      </Popover>\n    );\n\n    return (\n      <div>\n        <h1>Theremin</h1>\n        <InputGroup\n          disabled={creatingNewRoom}\n          large\n          placeholder=\"\"\n          rightElement={newOrExistingRoomMenu}\n          onChange={this.onCodeChange}\n          value={peerId}\n        />\n        {action !== Action.WaitingForId &&\n        <Button\n          large\n          intent={Intent.PRIMARY}\n          text=\"Launch!\"\n          onClick={creatingNewRoom ? this.launchNewRoom : this.joinExistingRoom}\n        />\n        }\n      </div>\n    );\n  };\n}\n\nexport default withRouter(LandingPage);","import Peer, { DataConnection } from 'peerjs';\n\nexport interface ChannelParams {\n  /* The room code to send/receive messages. */\n  peerId?: string;\n  /* Called when id is ready to use. */\n  onIdGiven?: (myId: string) => void;\n}\n\nexport interface RoomParams {\n  /* Called when connection closed. */\n  onClose: () => void;\n  /* Called when data is received. */\n  onData: (data: any) => void;\n  /* Called when an error occurs. */\n  onError: (error: any) => void;\n  /* Called when connection is ready to use. */\n  onOpen: () => void;\n}\n\n/**\n * Object allowing for the transmission of messages.\n */\nexport default class Channel {\n  private connection: DataConnection | null = null;\n  private peer: Peer | null = null;\n  private onClose: () => void;\n  private onData: (data: any) => void;\n  private onError: (error: any) => void;\n  private onOpen: () => void;\n  private onIdGiven: (myId: string) => void;\n  private peerId: string | null = null;\n  private myId: string | null = null;\n\n  constructor(params: ChannelParams) {\n    const {\n      peerId,\n      onIdGiven,\n    } = params;\n\n    this.onIdGiven = onIdGiven || (() => {});\n    this.peerId = peerId || null;\n\n    // Have PeerJS only print errors.\n    this.peer = new Peer(undefined, {\n      secure: true,\n      host: 'web-theremin-peer-js-server.herokuapp.com',\n      port: 443,\n      key: 'CheR4uo4',\n      debug: 1,\n    });\n    this.setHandlers();\n  }\n\n  get id(): string | null { return this.myId; }\n\n  /**\n   * Sets up handlers, kinda the second initializer.\n   */\n  openRoom = (params: RoomParams) => {\n    const {\n      onClose,\n      onData,\n      onError,\n      onOpen,\n    } = params;\n\n    this.onClose = onClose;\n    this.onData = onData;\n    this.onError = onError;\n    this.onOpen = onOpen;\n  };\n\n  /**\n   * Attempts to send data. If there is no connection or the connection is not\n   * open, no action is taken and `false` is returned.\n   */\n  sendData = (data: any) => {\n    if (this.connection === null || !this.connection.open) return false;\n    this.connection.send(data);\n    return true;\n  };\n\n  private setHandlers = () => {\n    this.peer!.on('open', myId => {\n      console.log('open called');\n      this.connectToRoom(myId);\n    });\n    this.peer!.on('connection', connection => {\n      console.log('connection called');\n      this.onConnection(connection);\n    });\n    this.peer!.on('error', e => {\n      console.log('got an error ...');\n      console.error('error', e);\n    });\n    this.peer!.on('close', () => console.log('closing ...'));\n    this.peer!.on('disconnected', () => console.log('disconnected ...'));\n  };\n\n  private connectToRoom = (myId: string) => {\n    this.myId = myId;\n    console.log('my id:', this.myId);\n    this.onIdGiven(myId);\n    if (this.peerId !== null) {\n      console.log(`Trying to connect to peer ${this.peerId}.`);\n      this.connection = this.peer!.connect(this.peerId, { reliable: true });\n      this.setConnectionHandlers();\n    }\n  };\n\n  private setConnectionHandlers = () => {\n    if (this.connection === null) return;\n\n    console.log('Connected to:', this.connection!.peer);\n\n    this.connection!.on('close', () => {\n      console.log('Connection Closed');\n      this.connection = null;\n      this.onClose();\n    });\n    this.connection!.on('data', d => {\n      this.onData(d);\n    });\n    this.connection!.on('error', e => {\n      console.error(' error ... ', e);\n      this.onError(e);\n    });\n    this.connection!.on('open', () => {\n      console.log(' open ... ');\n      this.onOpen();\n    });\n  };\n\n  private onConnection = (connection: DataConnection) => {\n    console.log('Recieved connection');\n\n    // Only allow a single connection.\n    if (this.connection !== null && this.connection.open) {\n      console.log('Second connection attempt refused');\n      connection.on('open', () => {\n        connection.send('Already connected to another client.');\n        connection.close();\n      });\n      return;\n    }\n\n    // If not occupied, connect.\n    this.connection = connection;\n    this.setConnectionHandlers();\n  };\n}\n","import React from 'react';\n\nimport { BrowserRouter as Router, Route, RouteComponentProps } from 'react-router-dom';\n\nimport LandingPage from 'pages/components/LandingPage';\n\ninterface MatchParams {\n  roomCode: string;\n}\n\ninterface Props extends RouteComponentProps<MatchParams> { }\n\nconst Routing = () => (\n  <Router>\n    <Route\n      exact\n      path={`${process.env.NODE_ENV === 'production' ? '/web-theremin' : ''}/`}\n      render={(props: Props) => <LandingPage {...props} />}\n    />\n  </Router>\n);\n\nexport default Routing;\n","import React from 'react';\nimport dotenv from 'dotenv';\nimport { Classes } from '@blueprintjs/core';\n\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nimport Routing from 'pages/components/Routing';\n\nimport 'styles/App.css';\n\n\ndotenv.config();\n\nconst App = () => (\n  <div\n    className={`App ${Classes.DARK}`}\n  >\n    <Routing />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport dotenv from 'dotenv';\n\nimport App from 'pages/components/App';\nimport * as serviceWorker from 'scripts/serviceWorker';\n\nimport 'styles/index.css';\n\ndotenv.config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//\nserviceWorker.unregister();"],"sourceRoot":""}
{"version":3,"sources":["components/Room.tsx","utils/Message.tsx","components/LandingPage.tsx","components/Routing.tsx","components/App.tsx","scripts/serviceWorker.ts","index.tsx"],"names":["Stage","Message","Toaster","create","position","Position","BOTTOM","usePortal","canEscapeKeyClear","LandingPage","props","componentDidMount","generateRoomCode","randomstring","generate","length","charset","joinRoom","roomCode","hostString","host","history","push","launchNewRoom","show","timeout","message","icon","intent","Intent","PRIMARY","joinExistingRoom","state","setNewRoom","yes","setState","creatingNewRoom","onCodeChange","e","newRoomCode","target","value","toUpperCase","selectionStart","selectionEnd","setSelectionRange","render","newOrExistingRoomMenu","content","text","onClick","BOTTOM_RIGHT","rightIcon","disabled","large","placeholder","rightElement","onChange","React","Component","withRouter","process","REACT_APP_THEREMIN_HOST","REACT_APP_THEREMIN_PORT","calcColor","sound","frequency","volume","x","Math","log2","y","map","p","floor","a","lo","hi","max","min","xx","Room","channel","osc","screenRef","onOpen","console","log","sendData","onError","error","onClose","onData","data","onMouseDown","start","stage","Playing","onMouseUp","stop","Muted","locsToSound","locs","current","getBoundingClientRect","height","width","mean","zs","reduce","b","xs","ys","onMouseMove","event","color","SUCCESS","window","addEventListener","componentWillUnmount","removeEventListener","className","ref","style","borderColor","borderWidth","borderStyle","Loading","Tone","type","toDestination","createRef","Routing","exact","path","match","params","queryString","parse","location","search","dotenv","config","App","Classes","DARK","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22206158.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport {\n  ProgressBar, InputGroup, Button, Intent, FormGroup, Tooltip, H5, Slider,\n  Colors, Spinner,\n} from '@blueprintjs/core';\nimport * as Tone from 'tone';\n\nimport Message, { TIMEOUT } from 'utils/Message';\nimport Channel, { ChannelParams } from 'utils/connect';\nimport 'styles/Room.css';\n\n\nconst {\n  REACT_APP_THEREMIN_HOST = 'localhost',\n  REACT_APP_THEREMIN_PORT = '',\n} = process.env;\n\n// Initial frequency (all the way left).\nconst kInitFreq = 440;\n// Decibels per height.\nconst kHDivisions = 20;\nconst kWaveType = 'sine';\nconst kInitVol = -10;\nconst kBlack = '#000000';\n\n// Represents the location of a mouse cursor.\ntype Location = {\n  x: number;\n  y: number;\n};\n\n// Represents qualities of a sound.\ntype Sound = {\n  frequency: number;\n  volume: number;\n};\n\nenum Stage {\n  Loading,\n  Playing,\n  Muted,\n}\n\ninterface Props {\n  roomCode: string;\n  host: boolean;\n}\n\ninterface State {\n  color: string;\n  stage: Stage;\n}\n\n// Converts a sound into a color of red.\nconst calcColor = (sound: Sound) => {\n  // Recover x, y values.\n  const { frequency, volume } = sound;\n  const x = Math.log2(frequency / kInitFreq);\n  const y = volume / kHDivisions;\n\n  const clamp = (a: number, lo: number, hi: number) => (\n    Math.max(lo, Math.min(hi, a))\n  );\n  // Map x, y to the range {0, 1, ..., 255}.\n  const [xx, yy] = [x, y].map(p => Math.floor(clamp(256 * p, 0, 255)));\n  return `rgba(${xx},0,0,${y})`;\n};\n\nexport default class Room extends React.Component<Props, State> {\n  channel: Channel | null = null;\n  osc: Tone.Oscillator;\n  screenRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.osc = new Tone\n      .Oscillator({ type: kWaveType, frequency: kInitFreq, volume: kInitVol })\n      .toDestination();\n    this.screenRef = React.createRef();\n    this.state = {\n      color: kBlack,\n      stage: Stage.Loading,\n    };\n  }\n\n  private onOpen = () => {\n    console.log('opened connection.');\n    console.log('sending greeting.');\n    this.channel!.sendData({ message: 'hi' });\n  };\n\n  private onError = (error: any) => {\n    console.log('Got an error', error);\n  };\n\n  private onClose = () => {\n    console.log('closed connection lol.');\n  };\n\n  private onData = (data: any) => {\n    console.log(`data received: ${data}`);\n  };\n\n  private onMouseDown = () => {\n    this.osc.start();\n    this.setState({\n      stage: Stage.Playing,\n    });\n  };\n\n  private onMouseUp = () => {\n    this.osc.stop();\n    this.setState({\n      stage: Stage.Muted,\n    });\n  };\n\n  /**\n   * Takes the average location and converts to a sound.\n   */\n  private locsToSound = (locs: Location[]): Sound | null => {\n    const { current } = this.screenRef;\n    // Somehow the rectangle cannot be found.\n    if (current === null) return null;\n\n    const { height, width } = current.getBoundingClientRect();\n    console.log(height, width);\n    /* Mean of a list. */\n    const mean = (zs: number[]) => zs.reduce((a, b) => a + b) / zs.length;\n    const xs = locs.map(({ x }) => x / width);\n    const ys = locs.map(({ y }) => y / height);\n    const x = mean(xs);\n    const y = mean(ys);\n\n    if (!(0 <= x && x <= 1 && 0 <= y && y <= 1)) return null;\n\n    const frequency = kInitFreq * (2 ** x);\n    const volume = kHDivisions * y;\n    return { frequency, volume };\n  };\n\n\n  private onMouseMove = (event: MouseEvent) => {\n    const { x, y } = event;\n\n    const sound = this.locsToSound([\n      { x, y },\n    ]);\n    // Cursor is off of the screen.\n    if (sound === null) return;\n\n    const { frequency, volume } = sound;\n    console.log(`(${x}, ${y}) => ${frequency} Hz, ${volume} db`);\n\n    this.osc.frequency.value = frequency;\n    this.osc.volume.value = volume;\n\n    const { stage } = this.state;\n    if (stage !== Stage.Playing) return;\n\n    const color = calcColor(sound);\n    this.setState({ stage, color });\n  };\n\n  componentDidMount = () => {\n    // TODO(davidb2): incorporate peer.\n    /*\n    const { roomCode, host } = this.props;\n\n    this.channel = new Channel({\n      roomCode,\n      host,\n      onClose: this.onClose,\n      onData: this.onData,\n      onError: this.onError,\n      onOpen: this.onOpen,\n    });\n    */\n\n    Message.show({\n      timeout: TIMEOUT,\n      message: 'Successfully joined room',\n      icon: 'tick',\n      intent: Intent.SUCCESS,\n    });\n\n    window.addEventListener('mousedown', this.onMouseDown);\n    window.addEventListener('mouseup', this.onMouseUp);\n    window.addEventListener('mousemove', this.onMouseMove);\n    this.setState({\n      stage: Stage.Playing,\n    });\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener('mousedown', this.onMouseDown);\n    window.removeEventListener('mouseup', this.onMouseUp);\n    window.removeEventListener('mousemove', this.onMouseMove);\n  };\n\n  render = () => {\n    const { stage, color } = this.state;\n    console.log(color);\n    return (\n      <div\n        className=\"full\"\n        ref={this.screenRef}\n        style={{\n          borderColor: stage === Stage.Playing ? color : kBlack,\n          borderWidth: '7px',\n          borderStyle: 'solid',\n        }}\n      >\n        {stage === Stage.Loading && <Spinner />}\n      </div>\n    );\n  };\n}","import { Position, Toaster } from '@blueprintjs/core';\n\n\nexport const TIMEOUT = 2000;\n\nconst Message = Toaster.create({\n  position: Position.BOTTOM,\n  usePortal: true,\n  canEscapeKeyClear: true,\n});\n\nexport default Message;","/* eslint-disable */\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport {\n  Button, Intent, InputGroup, Popover, Menu, MenuItem, Position,\n} from '@blueprintjs/core';\nimport randomstring from 'randomstring';\n\n\nimport Message, { TIMEOUT } from 'utils/Message';\n\nimport 'styles/LandingPage.css';\n\n\ninterface JoinRoomParams {\n  roomCode: string;\n  host: boolean;\n}\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n  /* Toggle for determining whether the user wants to create a new room or join\n   * an existing room.\n   */\n  creatingNewRoom: boolean;\n  /* The room code typed into the text box by the user. */\n  roomCode: string;\n}\n\n\n/**\n * Represents the LandingPage that the user will initially see when navigating\n * to the theremin application, granted that they did not specify a room code\n * in the url.\n */\nclass LandingPage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      creatingNewRoom: true,\n      roomCode: '',\n    };\n  }\n\n  componentDidMount = () => { };\n\n  /**\n   * Generates a random alphanumeric string.\n   */\n  generateRoomCode = () => (\n    randomstring.generate({\n      length: 5,\n      charset: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    })\n  );\n\n  /**\n   * Join a room.\n   *\n   * @param roomCode - the code of the room to join.\n   *\n   * This function loads a new page.\n   */\n  joinRoom = ({ roomCode, host }: JoinRoomParams) => {\n    const { history } = this.props;\n    const hostString = host ? '?host=true' : '';\n    history.push(`${process.env.NODE_ENV === 'production' ? '/web-theremin' : ''}/${roomCode}${hostString}`);\n  };\n\n  /**\n   * Creates a brand new room.\n   * The code for the room is randomly generated within this function.\n   */\n  launchNewRoom = () => {\n    Message.show({\n      timeout: TIMEOUT,\n      message: 'Launching new room ...',\n      icon: 'drawer-left',\n      intent: Intent.PRIMARY,\n    });\n\n    const roomCode = this.generateRoomCode();\n    this.joinRoom({ roomCode, host: true });\n  };\n\n  /**\n   * Joins a room using the room code specified in the input box.\n   *\n   */\n  joinExistingRoom = () => {\n    Message.show({\n      timeout: TIMEOUT,\n      message: 'Joining existing room ...',\n      icon: 'drawer-left',\n      intent: Intent.PRIMARY,\n    });\n\n    const { roomCode } = this.state;\n    this.joinRoom({ roomCode, host: false });\n  };\n\n\n  /**\n   * A toggle for determining whether the user wants to create a new room or\n   * join an existing room.\n   *\n   * @param yes - If yes is `true`, then the user desires to create a new room.\n   *\n   * This function updates the state.\n   */\n  setNewRoom = (yes: boolean) => (\n    this.setState({\n      creatingNewRoom: yes,\n    })\n  );\n\n  /**\n   * Update the room code while the user types.\n   */\n  onCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newRoomCode = e.target.value.toUpperCase();\n    const { target } = e;\n    const { selectionStart, selectionEnd } = target;\n    return this.setState({\n      roomCode: newRoomCode,\n    }, () => target.setSelectionRange(selectionStart || 0, selectionEnd || 0));\n  };\n\n  render = () => {\n    const { creatingNewRoom, roomCode } = this.state;\n    const newOrExistingRoomMenu = (\n      <Popover\n        content={(\n          <Menu>\n            <MenuItem\n              text=\"Create New Room\"\n              onClick={() => this.setNewRoom(true)}\n            />\n            <MenuItem\n              text=\"Join Existing Room\"\n              onClick={() => this.setNewRoom(false)}\n            />\n          </Menu>\n        )}\n        position={Position.BOTTOM_RIGHT}\n      >\n        <Button\n          rightIcon=\"caret-down\"\n          text={creatingNewRoom ? 'Create New Room' : 'Join Existing Room'}\n        />\n      </Popover>\n    );\n\n    return (\n      <div>\n        <h1>Theremin</h1>\n        <InputGroup\n          disabled={creatingNewRoom}\n          large\n          placeholder=\"JM4W7\"\n          rightElement={newOrExistingRoomMenu}\n          onChange={this.onCodeChange}\n          value={roomCode}\n        />\n        <Button\n          large\n          intent={Intent.PRIMARY}\n          text=\"Launch!\"\n          onClick={creatingNewRoom ? this.launchNewRoom : this.joinExistingRoom}\n        />\n      </div>\n    );\n  };\n}\n\nexport default withRouter(LandingPage);","import React from 'react';\n\nimport { BrowserRouter as Router, Route, RouteComponentProps } from 'react-router-dom';\nimport queryString from 'query-string';\n\nimport LandingPage from 'components/LandingPage';\nimport Room from 'components/Room';\n\ninterface MatchParams {\n  roomCode: string;\n}\n\ninterface Props extends RouteComponentProps<MatchParams> { }\n\nconst Routing = () => (\n  <Router>\n    <Route\n      exact\n      path={`${process.env.NODE_ENV === 'production' ? '/web-theremin' : ''}/:roomCode`}\n      render={(props: Props) => {\n        const { roomCode } = props.match.params;\n        const parsed = queryString.parse(props.location.search);\n        const host = parsed.host === 'true';\n        return <Room {...props} roomCode={roomCode} host={host} />;\n      }}\n    />\n    <Route\n      exact\n      path={`${process.env.NODE_ENV === 'production' ? '/web-theremin' : ''}/`}\n      render={(props: Props) => <LandingPage {...props} />}\n    />\n  </Router>\n);\n\nexport default Routing;\n","import React from 'react';\nimport dotenv from 'dotenv';\nimport { Classes } from '@blueprintjs/core';\n\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nimport Routing from 'components/Routing';\n\nimport 'styles/App.css';\n\n\ndotenv.config();\n\nconst App = () => (\n  <div\n    className={`App ${Classes.DARK}`}\n    style={{ width: '100vw', height: '100vh' }}\n  >\n    <Routing />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport dotenv from 'dotenv';\n\nimport App from 'components/App';\nimport * as serviceWorker from 'scripts/serviceWorker';\n\nimport 'styles/index.css';\n\ndotenv.config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//\nserviceWorker.unregister();"],"sourceRoot":""}